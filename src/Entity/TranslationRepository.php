<?php

namespace ManuelAguirre\Bundle\TranslationBundle\Entity;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query;
use Doctrine\Persistence\ManagerRegistry;
use ManuelAguirre\Bundle\TranslationBundle\TranslationRepository as RepositoryInterface;
use function array_filter;
use function Doctrine\ORM\QueryBuilder;
use function explode;
use function is_iterable;

/**
 * TranslationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TranslationRepository extends ServiceEntityRepository implements RepositoryInterface
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Translation::class);
    }

    public function getAllQueryBuilder(
        $search = null,
        $domain = null,
        $frontendDomains = null,
        $inactive = false
    ) {
        $query = $this->createQueryBuilder('translation')
            ->addOrderBy('translation.active', 'DESC')
            ->addOrderBy('translation.domain', 'ASC')
            ->addOrderBy('translation.code', 'ASC');

        if ($inactive) {
            $query->andWhere('translation.active = false');
        }

        if (null !== $search) {
            $part = $query->expr()->orX()
                ->add('translation.code LIKE :search')
                ->add('translation.values LIKE :search');

            $query->andWhere($part)
                ->setParameter('search', "%$search%");
        }

        if (null !== $domain) {
            $query->andWhere('translation.domain IN (:domain)')
                ->setParameter('domain', $domain);
        }

        if (is_iterable($frontendDomains)) {
            $conditions = [];

            foreach ($frontendDomains as $index => $fDomain) {
                $param = "f_domain_" . $index;
                $query->setParameter($param, '%' . $fDomain . '%');
                $conditions[] = "translation.frontendDomains LIKE :{$param}";
            }

            $query->andWhere($query->expr()->orX(...$conditions));
        }

        return $query;
    }

    public function getAll(
        $search = null,
        $domain = null,
        $frontendDomains = null,
    ) {
        return $this->getAllQueryBuilder($search, $domain, $frontendDomains)
            ->getQuery()
            ->getArrayResult();
    }

    public function getAllEntities($search = null, $domain = null)
    {
        return $this->getAllQueryBuilder($search, $domain)
            ->getQuery()
            ->getResult();
    }

    public function getActiveTranslations(): array
    {
        return $this->createQueryBuilder('translation')
            ->select('translation.code,
            translation.domain,
            translation.values,
            translation.hash
            ')
            ->orderBy('translation.code')
            ->andWhere('translation.active = true')
            ->andWhere('translation.onlyFrontend = false')
            ->getQuery()
            ->getArrayResult();
    }

    public function codeExists($code)
    {
        return $this->createQueryBuilder('t')
                ->select('COUNT(t.code)')
                ->where('t.code = :code')
                ->setParameter('code', $code)
                ->getQuery()
                ->getSingleScalarResult() > 0;
    }

    public function saveTranslation(Translation $entity, $flush = true)
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function getExistentDomains()
    {
        $result = $this->createQueryBuilder('t')
            ->select('t.domain')
            ->addGroupBy('t.domain')
            ->getQuery()
            ->getScalarResult();

        $domains = array();

        foreach ($result as $item) {
            $domains[$item['domain']] = $item['domain'];
        }

        return $domains;
    }

    public function getExistentFrontendDomains()
    {
        $result = $this->createQueryBuilder('t')
            ->select('t.frontendDomains domain')
            ->addGroupBy('t.frontendDomains')
            ->getQuery()
            ->getScalarResult();

        $domains = [];

        foreach ($result as ['domain' => $item]) {
            foreach (explode(',', $item) as $domain) {
                $domains[$domain] = $domain;
            }
        }

        return array_filter($domains);
    }

    public function inactiveByDomainAndCodes($domain, $codes)
    {
        return $this->createQueryBuilder('t')
            ->update('ManuelTranslationBundle:Translation', 't')
            ->set('t.active', 'false')
            ->where('t.domain = :domain')
            ->andWhere('t.code IN (:codes)')
            ->andWhere('t.active = true')
            ->setParameter('domain', $domain)
            ->setParameter('codes', (array)$codes)
            ->getQuery()
            ->execute();
    }

    public function getOneArrayByCodeAndDomain($code, $domain)
    {
        return $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.domain = :domain')
            ->andWhere('t.code = :code')
            ->setParameter('domain', $domain)
            ->setParameter('code', $code)
            ->getQuery()
            ->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }

    public function findByCodesAndDomains(array $data): array
    {
        $query = $this->createQueryBuilder('t')
            ->select('t.code, t.domain');

        foreach ($data as $index => $item) {
            $query->orWhere("t.code = :code_{$index} AND t.domain = :domain_{$index}")
                ->setParameter("code_{$index}", $item['code'] ?? null)
                ->setParameter("domain_{$index}", $item['domain'] ?? null);
        }


        return $query->getQuery()->getArrayResult();
    }
}
